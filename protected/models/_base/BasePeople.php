<?php

/**
 * This is the model base class for the table "people".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "People".
 *
 * Columns in table "people" available as properties of the model,
 * followed by relations of table "people" available as properties of the model.
 *
 * @property string $id
 * @property string $first_name
 * @property string $middle_name
 * @property string $last_name
 * @property string $aliases
 * @property string $photo
 * @property string $birth_date
 * @property string $gender
 * @property string $notes
 * @property string $twitter_handle
 * @property string $facebook_id
 * @property string $email_id
 * @property string $address_id
 * @property string $phone_id
 * @property string $create_date
 * @property string $update_date
 * @property string $delete_date
 *
 * @property PersonAddresses $address
 * @property PersonEmails $email
 * @property PersonPhones $phone
 * @property PersonAddresses[] $personAddresses
 * @property PersonEmails[] $personEmails
 * @property PersonPhones[] $personPhones
 * @property Users[] $users
 */
abstract class BasePeople extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'people';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'People|Peoples', $n);
	}

	public static function representingColumn() {
		return 'first_name';
	}

	public function rules() {
		return array(
			//array('first_name, last_name, gender, create_date', 'required'), // gender required
			array('first_name, last_name, create_date', 'required'),
			array('first_name, middle_name, last_name', 'length', 'max'=>50),
			array('aliases', 'length', 'max'=>100),
			array('photo', 'length', 'max'=>255),
			array('gender', 'length', 'max'=>6),
			array('twitter_handle, facebook_id', 'length', 'max'=>45),
			array('email_id, address_id, phone_id', 'length', 'max'=>10),
			array('birth_date, notes, update_date, delete_date', 'safe'),
			array('middle_name, aliases, photo, birth_date, notes, twitter_handle, facebook_id, email_id, address_id, phone_id, update_date, delete_date', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, first_name, middle_name, last_name, aliases, photo, birth_date, gender, notes, twitter_handle, facebook_id, email_id, address_id, phone_id, create_date, update_date, delete_date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'address' => array(self::BELONGS_TO, 'PersonAddresses', 'address_id'),
			'email' => array(self::BELONGS_TO, 'PersonEmails', 'email_id'),
			'phone' => array(self::BELONGS_TO, 'PersonPhones', 'phone_id'),
			'personAddresses' => array(self::HAS_MANY, 'PersonAddresses', 'person_id'),
			'personEmails' => array(self::HAS_MANY, 'PersonEmails', 'person_id'),
			'personPhones' => array(self::HAS_MANY, 'PersonPhones', 'person_id'),
			'users' => array(self::HAS_MANY, 'Users', 'person_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'first_name' => Yii::t('app', 'First Name'),
			'middle_name' => Yii::t('app', 'Middle Name'),
			'last_name' => Yii::t('app', 'Last Name'),
			'aliases' => Yii::t('app', 'Aliases'),
			'photo' => Yii::t('app', 'Photo'),
			'birth_date' => Yii::t('app', 'Birth Date'),
			'gender' => Yii::t('app', 'Gender'),
			'notes' => Yii::t('app', 'Notes'),
			'twitter_handle' => Yii::t('app', 'Twitter Handle'),
			'facebook_id' => Yii::t('app', 'Facebook'),
			'email_id' => null,
			'address_id' => null,
			'phone_id' => null,
			'create_date' => Yii::t('app', 'Create Date'),
			'update_date' => Yii::t('app', 'Update Date'),
			'delete_date' => Yii::t('app', 'Delete Date'),
			'address' => null,
			'email' => null,
			'phone' => null,
			'personAddresses' => null,
			'personEmails' => null,
			'personPhones' => null,
			'users' => null,
		);
	}

	public function beforeValidate() {
		if($this->isNewRecord) { $this->create_date = date('Y-m-d H:i:s'); }
		else { $this->update_date = date('Y-m-d H:i:s'); }

		return true;
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('first_name', $this->first_name, true);
		$criteria->compare('middle_name', $this->middle_name, true);
		$criteria->compare('last_name', $this->last_name, true);
		$criteria->compare('aliases', $this->aliases, true);
		$criteria->compare('photo', $this->photo, true);
		$criteria->compare('birth_date', $this->birth_date, true);
		$criteria->compare('gender', $this->gender, true);
		$criteria->compare('notes', $this->notes, true);
		$criteria->compare('twitter_handle', $this->twitter_handle, true);
		$criteria->compare('facebook_id', $this->facebook_id, true);
		$criteria->compare('email_id', $this->email_id);
		$criteria->compare('address_id', $this->address_id);
		$criteria->compare('phone_id', $this->phone_id);
		$criteria->compare('create_date', $this->create_date, true);
		$criteria->compare('update_date', $this->update_date, true);
		$criteria->compare('delete_date', $this->delete_date, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}