<?php

/**
 * This is the model base class for the table "person_addresses".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PersonAddresses".
 *
 * Columns in table "person_addresses" available as properties of the model,
 * followed by relations of table "person_addresses" available as properties of the model.
 *
 * @property string $id
 * @property string $person_id
 * @property string $address_type
 * @property string $address
 * @property string $address2
 * @property string $address3
 * @property string $city
 * @property string $region
 * @property string $postal_code
 * @property string $create_date
 * @property string $update_date
 * @property string $delete_date
 *
 * @property People[] $peoples
 * @property People $person
 * @property UserPersonAddresses[] $userPersonAddresses
 */
abstract class BasePersonAddresses extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'person_addresses';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'PersonAddresses|PersonAddresses', $n);
	}

	public static function representingColumn() {
		return 'address_type';
	}

	public function rules() {
		return array(
			array('person_id, address_type, address, city, region, postal_code', 'required'),
			array('person_id', 'length', 'max'=>10),
			array('address_type, address, address2, address3, city, region', 'length', 'max'=>255),
			array('postal_code', 'length', 'max'=>50),
			array('delete_date', 'safe'),
			array('address2, address3, delete_date', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, person_id, address_type, address, address2, address3, city, region, postal_code, create_date, update_date, delete_date', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'peoples' => array(self::HAS_MANY, 'People', 'address_id'),
			'person' => array(self::BELONGS_TO, 'People', 'person_id'),
			'userPersonAddresses' => array(self::HAS_MANY, 'UserPersonAddresses', 'person_address_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'person_id' => null,
			'address_type' => Yii::t('app', 'Address Type'),
			'address' => Yii::t('app', 'Address'),
			'address2' => Yii::t('app', 'Address2'),
			'address3' => Yii::t('app', 'Address3'),
			'city' => Yii::t('app', 'City'),
			'region' => Yii::t('app', 'Region'),
			'postal_code' => Yii::t('app', 'Postal Code'),
			'create_date' => Yii::t('app', 'Create Date'),
			'update_date' => Yii::t('app', 'Update Date'),
			'delete_date' => Yii::t('app', 'Delete Date'),
			'peoples' => null,
			'person' => null,
			'userPersonAddresses' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('person_id', $this->person_id);
		$criteria->compare('address_type', $this->address_type, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('address2', $this->address2, true);
		$criteria->compare('address3', $this->address3, true);
		$criteria->compare('city', $this->city, true);
		$criteria->compare('region', $this->region, true);
		$criteria->compare('postal_code', $this->postal_code, true);
		$criteria->compare('create_date', $this->create_date, true);
		$criteria->compare('update_date', $this->update_date, true);
		$criteria->compare('delete_date', $this->delete_date, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}